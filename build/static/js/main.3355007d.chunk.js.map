{"version":3,"sources":["utils/duration/index.js","pomodoro/Pomodoro.js","utils/useInterval/index.js","utils/class-names/index.js","App.js","index.js"],"names":["minutesToDuration","givenMinutes","minutes","Math","floor","toString","padStart","nextTick","prevState","timeRemaining","max","Pomodoro","useState","isTimerRunning","setIsTimerRunning","session","setSession","focusDuration","setFocusDuration","breakDuration","setBreakDuration","handleDuration","event","handleType","target","dataset","testid","undefined","parentElement","split","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","Audio","play","currentSession","label","nextSession","classNameToBoolean","calculatePercentage","num1","num2","className","data-testid","type","disabled","onClick","role","aria-label","title","nextState","prevStateSession","oi","Object","entries","reduce","classes","value","concat","filter","join","givenSeconds","seconds","round","secondsToDuration","style","height","aria-valuemin","aria-valuemax","aria-valuenow","width","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3355007d.chunk.js","sourcesContent":["/**\n * Formats a number of minutes as 'mm:00'.\n *\n * For example,\n *    minutesToDuration(3) = '03:00'\n *    minutesToDuration(45) = '45:00'\n *\n * @param givenMinutes\n *    the number of minutes in the duration\n * @returns {string}\n *    the given minutes formatted as 'mm:00'\n */\n\nexport function minutesToDuration(givenMinutes) {\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\n  return `${minutes}:00`;\n}\n\n/**\n * Formats a number of seconds as 'mm:ss'.\n *\n * For example,\n *    secondsToDuration(305) = '05:05'\n *    secondsToDuration(930) = '15:30'\n *\n * @param givenSeconds\n *    the number of seconds in the duration\n * @returns {string}\n *    the given seconds formatted as 'mm:ss'\n */\n\nexport function secondsToDuration(givenSeconds) {\n  const minutes = Math.floor((givenSeconds % 3600) / 60)\n    .toString()\n    .padStart(2, \"0\");\n  const seconds = Math.round(givenSeconds % 60)\n    .toString()\n    .padStart(2, \"0\");\n  return `${minutes}:${seconds}`;\n}\n","import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport { minutesToDuration, secondsToDuration } from \"../utils/duration\";\nimport useInterval from \"../utils/useInterval\";\n\n// These functions are defined outside of the component to ensure they do not have access to state\n// and are, therefore, more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher-order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n\n  // ToDo: Allow the user to adjust the focus and break duration.\n  // const focusDuration = 25;\n  // const breakDuration = 5;\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You won't need to make changes to the callback function\n   */\n  const handleDuration = (event) => {\n    // handles the button and the icon inside of the button so it will always get the testId to decide what to do\n    let handleType = event.target.dataset.testid;\n    if (handleType === undefined) {\n      handleType = event.target.parentElement.dataset.testid;\n    }\n    let split = handleType.split(\"-\");\n    // checks if the focus/break duration will be within the allowed boundaries\n    if (split[1] === \"focus\") {\n      split[0] === \"decrease\"\n        ? focusDuration > 5 && setFocusDuration(focusDuration - 5)\n        : focusDuration < 60 && setFocusDuration(focusDuration + 5);\n    } else if (split[1] === \"break\") {\n      split[0] === \"decrease\"\n        ? breakDuration > 1 && setBreakDuration(breakDuration - 1)\n        : breakDuration < 15 && setBreakDuration(breakDuration + 1);\n    }\n  };\n\n  useInterval(\n    () => {\n      if (session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n        return setSession(nextSession(focusDuration, breakDuration));\n      }\n      return setSession(nextTick);\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n  function playPause() {\n    setIsTimerRunning((prevState) => {\n      const nextState = !prevState;\n      if (nextState) {\n        setSession((prevStateSession) => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60,\n            };\n          }\n          return prevStateSession;\n        });\n      }\n      return nextState;\n    });\n  }\n\n  const handleStop = () => {\n    setIsTimerRunning(false);\n    setSession(null);\n    setFocusDuration(25);\n    setBreakDuration(5);\n  };\n  const calculatePercentage = (num1, num2) => {\n    return 1 - num1 / (num2 * 60);\n  };\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <div className=\"input-group input-group-lg mb-2\">\n            <span className=\"input-group-text\" data-testid=\"duration-focus\">\n              {/* TODO: Update this text to display the current focus session duration */}\n              Focus Duration: {minutesToDuration(focusDuration)}\n            </span>\n            <div className=\"input-group-append\">\n              {/* TODO: Implement decreasing focus duration and disable during a focus or break session */}\n              <button\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                data-testid=\"decrease-focus\"\n                disabled={session}\n                onClick={handleDuration}\n              >\n                <span className=\"oi oi-minus\" />\n              </button>\n              {/* TODO: Implement increasing focus duration and disable during a focus or break session */}\n              <button\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                data-testid=\"increase-focus\"\n                disabled={session}\n                onClick={handleDuration}\n              >\n                <span className=\"oi oi-plus\" />\n              </button>\n            </div>\n          </div>\n        </div>\n        <div className=\"col\">\n          <div className=\"float-right\">\n            <div className=\"input-group input-group-lg mb-2\">\n              <span className=\"input-group-text\" data-testid=\"duration-break\">\n                {/* TODO: Update this text to display the current break session duration */}\n                Break Duration: {minutesToDuration(breakDuration)}\n              </span>\n              <div className=\"input-group-append\">\n                {/* TODO: Implement decreasing break duration and disable during a focus or break session*/}\n                <button\n                  type=\"button\"\n                  className=\"btn btn-secondary\"\n                  data-testid=\"decrease-break\"\n                  disabled={session}\n                  onClick={handleDuration}\n                >\n                  <span className=\"oi oi-minus\" />\n                </button>\n                {/* TODO: Implement increasing break duration and disable during a focus or break session*/}\n                <button\n                  type=\"button\"\n                  className=\"btn btn-secondary\"\n                  data-testid=\"increase-break\"\n                  disabled={session}\n                  onClick={handleDuration}\n                >\n                  <span className=\"oi oi-plus\" />\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <div\n            className=\"btn-group btn-group-lg mb-2\"\n            role=\"group\"\n            aria-label=\"Timer controls\"\n          >\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              data-testid=\"play-pause\"\n              title=\"Start or pause timer\"\n              onClick={playPause}\n            >\n              <span\n                className={classNames({\n                  oi: true,\n                  \"oi-media-play\": !isTimerRunning,\n                  \"oi-media-pause\": isTimerRunning,\n                })}\n              />\n            </button>\n            {/* TODO: Implement stopping the current focus or break session. and disable the stop button when there is no active session */}\n            {/* TODO: Disable the stop button when there is no active session */}\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              data-testid=\"stop\"\n              title=\"Stop the session\"\n              disabled={!session}\n              onClick={handleStop}\n            >\n              <span className=\"oi oi-media-stop\" />\n            </button>\n          </div>\n        </div>\n      </div>\n      {session ? (\n        <>\n          <div>\n            {/* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */}\n            <div className=\"row mb-2\">\n              <div className=\"col\">\n                {/* TODO: Update message below to include current session (Focusing or On Break) total duration */}\n                <h2 data-testid=\"session-title\">\n                  {session?.label} for{\" \"}\n                  {session?.label === \"Focusing\"\n                    ? minutesToDuration(focusDuration)\n                    : minutesToDuration(breakDuration)}{\" \"}\n                  minutes\n                </h2>\n\n                {/* TODO: Update message below correctly format the time remaining in the current session */}\n                <p className=\"lead\" data-testid=\"session-sub-title\">\n                  {secondsToDuration(session?.timeRemaining)} remaining\n                </p>\n                <h4>{session && !isTimerRunning ? \"Paused\" : \"\"}</h4>\n              </div>\n            </div>\n            <div className=\"row mb-2\">\n              <div className=\"col\">\n                <div className=\"progress\" style={{ height: \"20px\" }}>\n                  <div\n                    className=\"progress-bar\"\n                    role=\"progressbar\"\n                    aria-valuemin=\"0\"\n                    aria-valuemax=\"100\"\n                    aria-valuenow={\n                      calculatePercentage(\n                        session.timeRemaining,\n                        session.label === \"Focusing\"\n                          ? focusDuration\n                          : breakDuration\n                      ) * 100\n                    } // TODO: Increase aria-valuenow as elapsed time increases\n                    style={{\n                      width:\n                        calculatePercentage(\n                          session.timeRemaining,\n                          session.timeRemaining === \"Focusing\"\n                            ? focusDuration\n                            : breakDuration\n                        ) + \"%\",\n                    }} // TODO: Increase width % as elapsed time increases\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </>\n      ) : (\n        \"\"\n      )}\n    </div>\n  );\n}\n\nexport default Pomodoro;\n","// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\nexport default function classNames(classNameToBoolean) {\n  return Object.entries(classNameToBoolean)\n    .reduce(\n      (classes, [className, value]) =>\n        classes.concat(value ? className : undefined),\n      []\n    )\n    .filter((className) => className !== undefined)\n    .join(\" \");\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Pomodoro from \"./pomodoro/Pomodoro\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header container\">\n        <h1>Pomodoro Timer</h1>\n      </header>\n      <div className=\"container\">\n        <Pomodoro />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}